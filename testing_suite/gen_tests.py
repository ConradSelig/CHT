from CHT_mrk1 import output, hashing, classes
from CHT_mrk1.CHT import CHT
import CHT


def initialize_test():

    print("\nInitialize Test")
    test_CHT = CHT.CHT()
    if type(test_CHT) is CHT.CHT:
        print("Passed Test")
    else:
        print("FAILED TEST")

    return


def add_row_test():

    print("\nAdd Row Test")
    test_CHT = CHT.CHT()
    # test_CHT.set_debug_mode(True)
    test_CHT.add_val("Hello", "World", "HelloWorld")

    if test_CHT.hash_table
        print("Passed Test")
    else:
        print("FAILED TEST")

    return


def add_many_rows_test():

    print("\nAdd Many Rows Test")
    test_CHT = CHT.CHT()
    # test_CHT.set_debug_mode(True)
    test_CHT.add_val("Hello", "World", "val")
    test_CHT.add_val("New", "Value", "new")
    test_CHT.add_val("New2", "Value2", "second new")
    test_CHT.add_val("Hello", "Value3", "one nest")
    test_CHT.add_val("New", "Value2", "twice nest")

    if test_CHT.hash_table
        print("Passed Test")
    else:
        print("FAILED TEST")

    return
